{"version":3,"file":"static/js/659.7161d0db.chunk.js","mappings":"kLACA,OAAiB,E,kBCejB,EAbe,WACb,OACEA,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,OAAaC,UAC3BH,EAAAA,EAAAA,KAACI,EAAAA,GAAa,CACZC,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,QACNC,UAAU,aAIlB,C,6HCoCA,EA7Ca,WACX,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAU9B,OARAG,EAAAA,EAAAA,YAAU,WACRZ,IACEa,EAAAA,EAAAA,IAAWb,GACRc,MAAK,SAAAC,GAAe,IAAZT,EAAIS,EAAJT,KACPC,EAAQD,EACV,IACCU,SAAQ,kBAAML,GAAa,EAAM,GACxC,GAAG,CAACX,KAEFV,EAAAA,EAAAA,KAAA2B,EAAAA,SAAA,CAAAxB,SACGiB,GACCpB,EAAAA,EAAAA,KAAC4B,EAAAA,EAAM,IACLZ,EAAKa,OAAS,GAChB7B,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAME,SACjBa,EAAKc,KAAI,SAAAC,GACR,OACEC,EAAAA,EAAAA,MAAA,MAAkB/B,UAAU,aAAYE,SAAA,EACtCH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOE,UACpBH,EAAAA,EAAAA,KAAA,OACEiC,IAAG,mCAAAC,OAAqCH,EAAKI,cAC7CC,IAAI,QAGRJ,EAAAA,EAAAA,MAAA,OAAK/B,UAAU,UAASE,SAAA,EACtBH,EAAAA,EAAAA,KAAA,KAAGC,UAAU,QAAOE,SAAE4B,EAAKM,QAC3BL,EAAAA,EAAAA,MAAA,KAAG/B,UAAU,cAAaE,SAAA,EACxBH,EAAAA,EAAAA,KAAA,QAAAG,SAAM,eAAiB,IAAE4B,EAAKO,kBAV3BP,EAAKrB,GAelB,OAGFV,EAAAA,EAAAA,KAAA,KAAAG,SAAG,4CAIX,C","sources":["webpack://goit-react-woolf-hw-05-movies/./src/components/Loader/loader.scss?a902","components/Loader/index.jsx","components/Ð¡ast/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import style from './loader.scss';\nimport { RotatingLines } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div className={style.loader}>\n      <RotatingLines\n        height=\"80\"\n        width=\"80\"\n        radius=\"9\"\n        color=\"green\"\n        ariaLabel=\"loading\"\n      />\n    </div>\n  );\n};\nexport default Loader;\n","import { getCastApi } from 'api/requests';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './cast.scss';\nimport Loader from 'components/Loader';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    id &&\n      getCastApi(id)\n        .then(({ cast }) => {\n          setCast(cast);\n        })\n        .finally(() => setIsLoading(false));\n  }, [id]);\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : cast.length > 0 ? (\n        <ul className=\"cast\">\n          {cast.map(elem => {\n            return (\n              <li key={elem.id} className=\"cast__list\">\n                <div className=\"image\">\n                  <img\n                    src={`https://image.tmdb.org/t/p/w500/${elem.profile_path}`}\n                    alt=\"\"\n                  />\n                </div>\n                <div className=\"wrapper\">\n                  <p className=\"title\">{elem.name}</p>\n                  <p className=\"description\">\n                    <span>Character:</span> {elem.character}\n                  </p>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>Sorry, there are no cast for this film</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["_jsx","className","style","children","RotatingLines","height","width","radius","color","ariaLabel","id","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","isLoading","setIsLoading","useEffect","getCastApi","then","_ref","finally","_Fragment","Loader","length","map","elem","_jsxs","src","concat","profile_path","alt","name","character"],"sourceRoot":""}